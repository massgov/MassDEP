{"version":3,"sources":["../ /.svg$","App.js","serviceWorker.js","index.js"],"names":["map","./arrow.svg","./arrowbent.svg","./building.svg","./chevron.svg","./circlechevron.svg","./docx.svg","./fax.svg","./generic.svg","./inputerror.svg","./inputsuccess.svg","./laptop.svg","./latlonglobe.svg","./login.svg","./marker.svg","./opennow.svg","./pdf.svg","./phone.svg","./questionmark.svg","./search.svg","./wheelchair.svg","./xlxs.svg","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","directory","options","tbl_results","filters","location","text","value","selection","filterOptions","handleInputTextTypeAheadOnChange","bind","assertThisInitialized","handleSelectBoxChange","opts","forEach","item","push","fname","lname","setState","that","fetch","headers","Accept","method","then","response","json","configureTypeAheadComponent","displayItems","suggestion","formatForTableDisplay","selected","selectedValue","locations","i","length","items","data","rowOne","getTableRow","label","rowTwo","locationText","getLocationText","rowThree","formatPhoneNumber","phone1","rowFour","phone2","rowFive","email","react_default","a","createElement","className","es","color","stackLabel","onChangeCallback","placeholder","onChange","rows","strPhone","slice","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a0d06a7.chunk.js","sourcesContent":["var map = {\n\t\"./arrow.svg\": 411,\n\t\"./arrowbent.svg\": 412,\n\t\"./building.svg\": 413,\n\t\"./chevron.svg\": 414,\n\t\"./circlechevron.svg\": 415,\n\t\"./docx.svg\": 416,\n\t\"./fax.svg\": 417,\n\t\"./generic.svg\": 418,\n\t\"./inputerror.svg\": 419,\n\t\"./inputsuccess.svg\": 420,\n\t\"./laptop.svg\": 421,\n\t\"./latlonglobe.svg\": 422,\n\t\"./login.svg\": 423,\n\t\"./marker.svg\": 424,\n\t\"./opennow.svg\": 425,\n\t\"./pdf.svg\": 426,\n\t\"./phone.svg\": 427,\n\t\"./questionmark.svg\": 428,\n\t\"./search.svg\": 429,\n\t\"./wheelchair.svg\": 430,\n\t\"./xlxs.svg\": 431\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 410;","import React, { Component } from 'react';\nimport { ColoredHeading } from '@massds/mayflower-react';\nimport { InputTextTypeAhead } from '@massds/mayflower-react';\nimport { SelectBox } from '@massds/mayflower-react';\nimport { ListingTable } from '@massds/mayflower-react';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      directory: [],\n      options: [],\n      tbl_results: [],\n      filters: {\n        location: {\n          text: \"\",\n          value: \"\"\n        },\n        selection: {\n          text: \"\",\n          value: \"\"\n        }\n      },\n      filterOptions: [\n        {text:\"All Locations\", value:\"ALL\"},\n        {text:\"Boston/HQ\", value:\"HQ\"},\n        {text:\"Western Regional Office\", value:\"WERO\"},\n        {text:\"Central Regional Office\", value:\"CERO\"},\n        {text:\"Northeast Regional Office\", value:\"NERO\"},\n        {text:\"Southeast Regional Office\", value:\"SERO\"},\n        {text:\"Wall Experiment Station\", value:\"WES\"}\n      ]\n    };\n    this.handleInputTextTypeAheadOnChange = this.handleInputTextTypeAheadOnChange.bind(this);\n    this.handleSelectBoxChange = this.handleSelectBoxChange.bind(this);\n  }\n\n  configureTypeAheadComponent(){\n    let options = this.state.directory;\n    let filters = this.state.filters;\n    let opts = [];\n    options.forEach(function(item){\n      if (filters.location.value === \"\" || filters.location.value === \"ALL\") {\n        opts.push({text:item.fname + \" \" + item.lname, value:item.id});\n      } else {\n        if (item.location === filters.location.value) {\n          opts.push({text:item.fname + \" \" + item.lname, value:item.id});\n        }\n      }\n    });\n    this.setState({options: opts})\n  }\n\n  componentDidMount () {\n    let that = this;\n    if(process.env.NODE_ENV === 'production'){\n      fetch('https://api.github.com/repos/massgov/MassDEP/contents/employee-lookup/public/data/directory.json', {\n        headers: {\n          \"Accept\": \"application/vnd.github.v3.raw\"\n        },\n        method: \"GET\"\n      }).then((response) =>\n        response.json()\n      ).then(function (json) {\n        that.setState({directory: json});\n        that.configureTypeAheadComponent();\n      });\n    }else if(process.env.NODE_ENV === 'development'){\n      fetch('./data/directory.json').then((response) =>\n        response.json()\n      ).then(function (json) {\n        that.setState({directory: json});\n        that.configureTypeAheadComponent();\n      });\n    }\n  }\n\n  handleInputTextTypeAheadOnChange(e, selection) {\n    let that = this;\n    let options = this.state.directory;\n    let displayItems = [];\n    let filters = this.state.filters;\n    filters.selection.text = \"\";\n    filters.selection.value = \"\";\n    options.forEach(function (item) {\n      if (item.id === selection.suggestion.value) {\n        filters.selection.text = item.fname + \" \" + item.lname;\n        filters.selection.value = item.id;\n        that.setState({filters: filters});\n        displayItems.push(item);\n      }\n    });\n    this.formatForTableDisplay(displayItems);\n  }\n\n  handleSelectBoxChange(e) {\n    let filters= this.state.filters;\n    filters.location.text = e.selected;\n    filters.location.value = e.selectedValue;\n    filters.selection.text = \"\";\n    filters.selection.value = \"\";\n    this.setState({filters: filters});\n    this.configureTypeAheadComponent();\n  }\n\n  static getTableRow() {\n    return {label: null, items: []};\n  }\n\n  static formatPhoneNumber(strPhone) {\n    return strPhone ? \"(\" + strPhone.slice(0,3) + \") \" + strPhone.slice(3,6) + \"-\" + strPhone.slice(6) : \"\";\n  }\n\n  getLocationText(value) {\n    let locations = this.state.filterOptions;\n    for (let i=0; i<locations.length; i++) {\n      if (locations[i].value === value) {\n        return locations[i].text;\n      }\n    }\n  }\n\n  formatForTableDisplay(items) {\n    let that = this;\n    let data = [];\n    items.forEach(function(item){\n      let rowOne = App.getTableRow();\n      rowOne.label = \"Name: \";\n      rowOne.items.push(item.fname + \" \" + item.lname);\n\n      let rowTwo = App.getTableRow();\n      rowTwo.label = \"Location: \";\n      let locationText = that.getLocationText(item.location);\n      rowTwo.items.push(locationText);\n\n      let rowThree = App.getTableRow();\n      rowThree.label = \"Phone 1: \";\n      rowThree.items.push(App.formatPhoneNumber(item.phone1));\n\n      let rowFour = App.getTableRow();\n      rowFour.label = \"Phone 2: \";\n      rowFour.items.push(App.formatPhoneNumber(item.phone2));\n\n      let rowFive = App.getTableRow();\n      rowFive.label = \"Email: \";\n      rowFive.items.push(item.email);\n\n      data.push(rowOne, rowTwo, rowThree, rowFour, rowFive);\n    });\n    this.setState({tbl_results: data});\n  }\n\n  render() {\n    return (\n      <section className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <ColoredHeading\n              text=\"MassDEP Employee Directory\"\n              color=\"blue\"\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n              <div className=\"col-12\">\n                <div id=\"input-select-box\">\n                  <SelectBox\n                    label=\"\"\n                    stackLabel={false}\n                    id=\"select-location\"\n                    selected={this.state.filters.location.text}\n                    options={this.state.filterOptions}\n                    onChangeCallback={this.handleSelectBoxChange}\n                  />\n                </div>\n              </div>\n              <div className=\"col-sm-10 col-md-8 col-lg-6 col-xl-5\">\n                <div id=\"input-text-type-ahead\">\n                  <InputTextTypeAhead\n                    label=\"\"\n                    placeholder=\"Employee Name\"\n                    id=\"employee-typeahead\"\n                    selected={this.state.filters.selection.text}\n                    options={this.state.options}\n                    onChange={this.handleInputTextTypeAheadOnChange}\n                  />\n                </div>\n              </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div id=\"results-listing-table\">\n              <ListingTable\n                rows={this.state.tbl_results}\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}